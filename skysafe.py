# -*- coding: utf-8 -*-
"""SkySafe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-lSVAxI5Y9vm5GwgRAeJ1il0H4YHhWgS

# ✈ **SkySafe AI - Advanced Risk Prediction Model (Prototype)**

المسار:  سلامة وأمن قطاع الطيران

المشكلة:  تواجه العديد من الرحلات الجوية خطر التأخير أو الإلغاء نتيجة الظروف الجوية غير المناسبة، مما يؤثر على سلامة العمليات وكفاءة إدارة الرحلات.

الحل:  مشروع SkySafe AI يقدم نموذجًا ذكيًا لتقييم احتمالية حدوث خطر عند الإقلاع، بناءً على بيانات الطقس وبيانات الرحلات السابقة. يستخدم النموذج خوارزميات تعلم آلي بسيطة لتحليل متغيرات مثل سرعة الرياح، درجة الحرارة، والهطول، وتحديد احتمالية تأخير الإقلاع أو وجود خطر

التقنيات المستخدمة:  (pipeline) Python، تحليل بيانات باستخدام Pandas، خوارزمية الانحدار اللوجستي (Logistic Regression) من مكتبة scikit-learn، وعرض النتائج بصريًا عبر Plotly. يتم تنفيذ النموذج عبر Google Colab

الأثر المتوقع:  تمكين مسؤولي العمليات من اتخاذ قرارات مبنية على البيانات لتقليل المخاطر المرتبطة بالإقلاع في ظروف جوية صعبة، وتحسين كفاءة جدول الرحلات، وتقديم تنبيهات مبكرة تقلل من التكاليف وترفع مستوى السلامة التشغيلية في قطاع الطيران

# **DRAFT** NO. 1
"""

# SkySafe AI - Advanced Risk Prediction Model (Prototype)
# Developed for AVIthon 2025 - Semi Final Phase

import pandas as pd
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# ===== 1. بيانات الرحلات والطقس التجريبية =====
data = {
    'wind_speed': [10, 25, 35, 5, 45, 15, 28, 33, 20, 40, 12, 38, 30, 18, 27],
    'temp': [30, 22, 18, 35, 15, 27, 20, 19, 24, 16, 31, 17, 21, 29, 23],
    'precipitation': [0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 2, 1, 0, 1],
    'visibility': [10, 8, 6, 12, 4, 10, 7, 5, 9, 3, 11, 4, 6, 10, 7],
    'humidity': [45, 60, 80, 40, 90, 50, 65, 78, 55, 85, 42, 88, 67, 53, 70],
    'pressure': [1012, 1005, 1002, 1015, 998, 1010, 1008, 1001, 1011, 996, 1013, 997, 1006, 1014, 1007],
    'departure_hour': [6, 14, 18, 5, 21, 9, 13, 17, 7, 23, 8, 20, 16, 11, 15],
    'day_of_week': [1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1],
    'delayed': [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]
}

df = pd.DataFrame(data)

# ===== 2. فصل المتغيرات المستقلة والتابعة =====
X = df.drop(columns=['delayed'])
y = df['delayed']

# ===== 3. تقسيم البيانات للتدريب والاختبار =====
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

# ===== 4. بناء النموذج باستخدام Pipeline =====
pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('model', RandomForestClassifier(n_estimators=100, random_state=42))
])

# ===== 5. تدريب النموذج =====
pipeline.fit(X_train, y_train)

# ===== 6. تجربة تنبؤ لحالة جديدة =====
new_data = pd.DataFrame({
    'wind_speed': [32],
    'temp': [20],
    'precipitation': [1],
    'visibility': [6],
    'humidity': [75],
    'pressure': [1003],
    'departure_hour': [18],
    'day_of_week': [3]
})

prediction = pipeline.predict(new_data)[0]
probability = pipeline.predict_proba(new_data)[0][1]

# ===== 7. طباعة النتيجة =====
print("هل يوجد خطر تأخير؟", "نعم" if prediction == 1 else "لا")
print("احتمالية الخطر: ", round(probability * 100, 1), "%")

"""# **DRAFT** NO. 2"""

!pip install streamlit pyngrok

# حذف ملفات التكوين القديمة إن وجدت
!rm -rf /root/.ngrok2/ngrok.yml
!rm -rf /root/.config/ngrok/ngrok.yml

from pyngrok import conf, ngrok

conf.get_default().auth_token = "30NMGFknPal0uALtvdozEPq2xm8_4Tor5Y8qFkLEGLqHQy4Vf"

!ngrok config add-authtoken 30NMGFknPal0uALtvdozEPq2xm8_4Tor5Y8qFkLEGLqHQy4Vf

# Commented out IPython magic to ensure Python compatibility.
# %%writefile skysafe_app.py
# import streamlit as st
# import matplotlib.pyplot as plt
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.preprocessing import StandardScaler
# from sklearn.pipeline import Pipeline
# import numpy as np
# 
# # واجهة الاستخدام
# 
# 
# 
# st.markdown("""
#     <style>
#     .stApp {
#         background-color: #002c3d;
#     }
#     </style>
# """, unsafe_allow_html=True)
# 
# st.markdown("""
#     <link href="https://fonts.googleapis.com/css2?family=Cairo&display=swap" rel="stylesheet">
#     <style>
#     * {
#         font-family: 'Cairo', sans-serif;
#     }
#     </style>
# """, unsafe_allow_html=True)
# 
# 
# 
# st.title("AVITHON 2025")
# st.image("SkySafe Logo.png", width=500)
# st.write("نموذج تنبؤ بخطر الإقلاع باستخدام بيانات الطقس والرحلة")
# 
# # إدخال البيانات
# temp = st.slider("درجة الحرارة (°C)", -10, 50, 25)
# wind = st.slider("سرعة الرياح (كم/س)", 0, 100, 20)
# humidity = st.slider("نسبة الرطوبة (%)", 0, 100, 60)
# visibility = st.slider("مدى الرؤية (كم)", 0, 10, 5)
# air_pressure = st.slider("الضغط الجوي (hPa)", 950, 1050, 1013)
# 
# input_data = np.array([[temp, wind, humidity, visibility, air_pressure]])
# 
# # نموذج مبسط للتجربة
# X = np.random.rand(100, 5) * [60, 100, 100, 10, 100] + [0, 0, 0, 0, 950]
# y = np.random.randint(0, 2, 100)
# 
# model = Pipeline([
#     ('scale', StandardScaler()),
#     ('clf', RandomForestClassifier())
# ])
# model.fit(X, y)
# 
# # التنبؤ
# prediction = model.predict(input_data)[0]
# probability = model.predict_proba(input_data)[0][1]
# 
# # عرض النتيجة
# st.markdown("### 🔎 النتيجة:")
# if prediction == 1:
#     st.error(f"⚠️ Potential takeoff risk detected with a probability of {round(probability*100, 1)}٪")
# else:
#     st.success(f"✅ No immediate risk detected. Probability is only {round(probability*100, 1)}٪")
# 
# # رسم بياني
# st.markdown("### 📊 تمثيل مرئي لاحتمالية الخطر")
# fig, ax = plt.subplots()
# 
# ax.bar(["Risk probability"], [probability*100], color="crimson" if prediction else "green")
# ax.set_ylim(0, 100)
# ax.set_title("Predicted Risk Level", fontsize=14)
# ax.set_ylabel("Percentage (%)", fontsize=12)
# ax.set_xticklabels(["Risk probability"], fontsize=12)
# st.pyplot(fig)

!streamlit run skysafe_app.py &>/dev/null &

from pyngrok import ngrok

public_url = ngrok.connect(8501)
print(f"🔗 رابط التطبيق: {public_url}")